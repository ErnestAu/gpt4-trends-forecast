from dotenv import load_dotenv
import os
from openai import OpenAI
import streamlit as st

load_dotenv()
openai_api_key = os.getenv("openai_api_key")
client = OpenAI(api_key=openai_api_key) 

# Load the text data
try:
    with open("text_data/text_data.txt", "r") as f:
        text_data = f.read()
except FileNotFoundError:
    text_data = ""

# Load the selected country
try:
    with open("text_data/selected_country.txt", "r") as f:
        selected_country = f.read().strip()
except FileNotFoundError:
    selected_country = "Worldwide"

with st.sidebar:
    # openai_api_key = st.text_input("OpenAI API Key", key="chatbot_api_key", type="password")
    model_version = st.selectbox("Model Version", ["gpt-4-turbo-preview", "gpt-4", "gpt-3.5-turbo-0125"])



st.title("ðŸ’¬ Chatbot")

st.markdown("""
This AI chatbot is trained to answer your queries based on Google Trends data. 

To get contextual responses, please ensure you have visited the 'Check Popularity Trend' page and entered some keywords for analysis.
            
#### Sample Questions You Can Ask:

1. "Why was _keyword_ popular during _timeframe_?"
2. "Do you notice any correlation between _keyword 1, keyword 2, and keyword 3?_"
3. "What do the trend graphs mean?"
4. "Can you explain how the forecasting works?"
5. "What does the confidence interval indicate?"
6. "What are some limitations of this trend analysis?"
""")

# Initialize the session state messages if not already initialized
if "messages" not in st.session_state:
    st.session_state["messages"] = [
        {
            "role": "system",
            "content":"You are an AI assistant designed specifically for the Popularity Trend Explorer, a Streamlit web application that analyzes and forecasts the popularity of keywords over time using Google Trends data and the Prophet forecasting model. The application allows users to explore the popularity trends of up to three keywords, providing insights into historical data as well as future predictions. \n\n"
                
                "For each keyword entered by the user, the application provides:\n"
                "- The starting date of actual data retrieved from Google Trends.\n"
                "- A series of popularity scores from Google Trends, corresponding to weekly intervals from the starting date. These scores range from 0 to 100, indicating the keyword's relative search volume.\n"
                "- The starting date for forecasted data, marking the point from which the application predicts future trends for the next year.\n"
                "- Forecasted popularity scores generated by the Prophet model, following a weekly increment from the forecast starting date.\n"
                "- Upper and lower confidence intervals for the forecasted data, offering a range within which the actual future values are expected to fall.\n\n"
                
                "Your role as the AI assistant involves understanding and responding to user queries. Questions might include:\n"
                "1. The reasons behind a keyword's popularity during specific timeframes.\n"
                "2. Possible correlations or comparisons between the trends of different keywords.\n"
                "3. The interpretation of the trend graphs presented in the application.\n"
                "4. An explanation of how forecasting works, particularly the methodology used by the Prophet model.\n"
                "5. The significance of the confidence intervals provided alongside the forecasted data.\n"
                "6. Any limitations inherent to the trend analysis performed by the application.\n\n"
                
                "Should users ask questions unrelated to the functionality and purpose of the Popularity Trend Explorer, your response should politely inform them of the question's irrelevance to the application's focus. Nonetheless, you are to attempt answering their query to the best of your ability, maintaining engagement and providing value whenever possible.\n\n"
                
                f"Structured data: {text_data if text_data else 'No keywords'}"
                f"The country associated with the structured data: {selected_country}.\n"

                "The structured data you receive for generating responses includes detailed data on keyword trends, formatted as follows:\n"
                "- \"Keyword number X:keyword\" indicates the user-defined keyword for analysis.\n"
                "- \"|Actual data starting date|date\" marks the beginning of the historical data period for the keyword.\n"
                "- \"|Actual data from Google Trends|scores\" lists the weekly popularity scores from Google Trends.\n"
                "- \"|Forecasted data starting date|date\" marks the beginning of the forecast period for the keyword.\n"
                "- \"|Forecasted data generated using the Prophet model|scores\" lists the weekly forecasted popularity scores for the next year.\n"
                "- \"|Upper confidence interval|scores\" and \"|Lower confidence interval|scores\" provide the upper and lower bounds for the forecasted data's confidence intervals.\n\n"
                "You will use this structured data to inform your responses, ensuring users receive accurate, context-specific information based on the application's analysis of keyword trends. \n\n"
                "Your responses should guide users through understanding and interpreting the data presented, aiding them in making informed decisions or satisfying their curiosity regarding keyword popularity trends.\n"


            
            # f"Google Trends data for {selected_country}.\n"
            #         "Key:\n"
            #         "- A: Actual\n"
            #         "- F: Forecast\n"
            #         "- CI_Upper: Upper CI\n"
            #         "- CI_Lower: Lower CI\n"
            #         "Data rounded to whole numbers, sampled every 2nd point.\n"
            #         "Timeframe: Past 5 years, 1 year future.\n"
            #         "Forecast: Prophet model.\n"
            #         "CI: Confidence range.\n"
            #         f"Data: {text_data if text_data else 'No keywords'}"
        },
        {
            "role": "assistant",
            "content": "How may I help you today?"
        }
    ]

# Display the messages, skipping system messages
for msg in st.session_state.messages:
    if msg["role"] != "system":
        st.chat_message(msg["role"]).write(msg["content"])

if prompt := st.chat_input():
    if not text_data:
        st.info("Please enter keywords in Popularity Trend Explorer to continue.")
        st.stop()

    st.session_state.messages.append({"role": "user", "content": prompt})
    st.chat_message("user").write(prompt)
    with st.spinner('Generating response...'):  # Display a spinner while the chatbot is generating a response
        response = client.chat.completions.create(model=model_version, messages=st.session_state.messages)
    msg = response.choices[0].message
    msg_dict = {
        "role": msg.role,
        "content": msg.content
        }
    st.session_state.messages.append(msg_dict)
    st.chat_message("assistant").write(msg_dict["content"])
